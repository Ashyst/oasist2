import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# 1. Data Exploration and Cleaning
# Load the dataset
df = pd.read_csv('/content/ifood_df.csv')

# Understand its structure
print(df.info())
print(df.describe())
print(df.head())

# Check for missing data
print(df.isnull().sum())

# Handle missing data (e.g., drop or fill with mean/median)
df = df.dropna()  # Alternatively, you could fill missing values with mean/median

# Handle inconsistent data (e.g., convert categorical data, normalize numerical data)
# Example: Converting categorical columns to numeric using one-hot encoding
df = pd.get_dummies(df, drop_first=True)

# 2. Descriptive Statistics
# Calculate key metrics
average_purchase_value = df['MntTotal'].mean()
frequency_of_purchases = df.groupby('Customer_Days').size()

print(f"Average Purchase Value: {average_purchase_value}")
print(f"Frequency of Purchases:\n{frequency_of_purchases.describe()}")

# 3. Customer Segmentation using K-means Clustering
# Feature selection for clustering (e.g., Total Amount, Frequency, Recency, etc.)
X = df[['MntTotal', 'Customer_Days', 'Age']]  # Example features

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Determine the optimal number of clusters using the Elbow Method
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', max_iter=300, n_init=10, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

# Fit KMeans with the optimal number of clusters
kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_scaled)

# 4. Visualization
# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['MntTotal'], y=df['Customer_Days'], hue=df['Cluster'], palette='viridis')
plt.title('Customer Segments')
plt.xlabel('Total Amount Spent')
plt.ylabel('Quantity Purchased')
plt.show()

# (Optional) Use PCA for dimensionality reduction if there are many features
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=df['Cluster'], palette='viridis')
plt.title('Customer Segments (PCA)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.show()

# 5. Insights and Recommendations
# Analyze characteristics of each segment
segment_summary = df.groupby('Cluster').mean()
print(segment_summary)

# Provide insights
for cluster in df['Cluster'].unique():
    print(f"\nCluster {cluster} Characteristics:")
    print(f"Average Total Amount Spent: {segment_summary.loc[cluster, 'MntTotal']}")
    print(f"Average Quantity Purchased: {segment_summary.loc[cluster, 'Customer_Days']}")
    print(f"Average Age: {segment_summary.loc[cluster, 'Age']}")

# Recommendations (example)
print("\nRecommendations:")
print("1. Target high-spending customers with premium products and exclusive offers.")
print("2. Offer loyalty programs to frequent buyers to increase retention.")
print("3. Provide age-appropriate marketing strategies for different customer segments.")
